<?php

namespace App\Http\Controllers;

use App\Mail\DepositReceiptMail;
use App\Models\BuoiChup;
use App\Models\ThanhToan;
use App\Services\PaymentService;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Mail;

class BookingDepositController extends Controller
{
    public function store(string $ma_bc, Request $request, PaymentService $payment)
    {
        // 1) Validate input
        $validated = $request->validate([
            'payment_method' => 'required|in:vi_ca_nhan,the_ngan_hang,vi_dien_tu,chuyen_khoan',
            'agree_terms'    => 'required|accepted',  // b·∫Øt bu·ªôc tick ƒëi·ªÅu kho·∫£n
            'available'      => 'nullable|numeric|min:0', // s·ªë d∆∞ m√¥ ph·ªèng ƒë·ªÉ demo
            'email'          => 'nullable|email' // n·∫øu mu·ªën g·ª≠i t·ªõi email t√πy √Ω; c√≤n kh√¥ng c√≥ th√¨ d√πng email trong DB
        ], [
            'agree_terms.accepted' => 'B·∫°n ph·∫£i ƒë·ªìng √Ω ƒêi·ªÅu kho·∫£n ƒë·∫∑t c·ªçc v√† Ch√≠nh s√°ch ho√†n ti·ªÅn.'
        ]);

        // 2) T√¨m bu·ªïi ch·ª•p
        $booking = BuoiChup::query()->where('Ma_BC', $ma_bc)->first();
        if (!$booking) {
            return response()->json(['message' => 'Kh√¥ng t√¨m th·∫•y bu·ªïi ch·ª•p'], 404);
        }

        // Tr·∫°ng th√°i h·ª£p l·ªá ƒë·ªÉ cho ph√©p ƒë·∫∑t c·ªçc
        if (!in_array($booking->Trang_Thai, ['Ch·ªù x√°c nh·∫≠n', 'Ch·ªù ƒë·∫∑t c·ªçc'])) {
            return response()->json([
                'message' => 'Tr·∫°ng th√°i bu·ªïi ch·ª•p kh√¥ng cho ph√©p ƒë·∫∑t c·ªçc hi·ªán t·∫°i.'
            ], 409);
        }

        // 3) T√≠nh ti·ªÅn
        $basePrice    = (float)$booking->Tong_Tien;
        $depositRate  = (float)($booking->Ti_Le_Coc ?? 30); // n·∫øu null th√¨ m·∫∑c ƒë·ªãnh 30%
        $depositAmt   = round($basePrice * $depositRate / 100, 2);

        $feeRate      = $payment->feeRate($validated['payment_method']);
        $serviceFee   = round($depositAmt * $feeRate, 2);
        $totalCharge  = $depositAmt + $serviceFee;

        // Map ph∆∞∆°ng th·ª©c cho c·ªôt enum hi·ªán c√≥ c·ªßa b·∫£ng thanh_toan (Ti·ªÅn m·∫∑t/Chuy·ªÉn kho·∫£n)
        [$enumMethod, $methodLabel] = match ($validated['payment_method']) {
            'chuyen_khoan' => ['Chuy·ªÉn kho·∫£n', 'Chuy·ªÉn kho·∫£n'],
            default        => ['Ti·ªÅn m·∫∑t',    str_replace('_', ' ', $validated['payment_method'])]
        };

        // 4) G·ªçi c·ªïng thanh to√°n (m√¥ ph·ªèng)
        $charge = $payment->charge($validated['payment_method'], $totalCharge, $validated['available'] ?? null);
        if (!$charge['success']) {
            // Ghi log giao d·ªãch th·∫•t b·∫°i
            Log::warning('Deposit failed', [
                'ma_bc' => $ma_bc,
                'method' => $validated['payment_method'],
                'reason' => $charge['message'] ?? 'unknown'
            ]);

            // L∆∞u d√≤ng th·∫•t b·∫°i v√†o b·∫£ng thanh_toan (ƒë·ªëi so√°t)
            ThanhToan::create([
                'Ma_TT'     => 'TT' . now()->format('YmdHis') . rand(100,999),
                'Ma_BC'     => $ma_bc,
                'So_Tien'   => $totalCharge,
                'Hinh_Thuc' => $enumMethod,
                'Trang_Thai'=> 'Th·∫•t b·∫°i',
                'Ghi_Chu'   => json_encode([
                    'type'           => 'deposit',
                    'deposit_amount' => $depositAmt,
                    'service_fee'    => $serviceFee,
                    'fee_rate'       => $feeRate,
                    'method_raw'     => $validated['payment_method'],
                    'error_code'     => $charge['error_code'] ?? null,
                    'error_message'  => $charge['message'] ?? null,
                ], JSON_UNESCAPED_UNICODE),
            ]);

            return response()->json([
                'message' => $charge['message'] ?? 'Thanh to√°n th·∫•t b·∫°i. Vui l√≤ng ch·ªçn ph∆∞∆°ng th·ª©c kh√°c.',
                'suggestion' => 'Vui l√≤ng ch·ªçn ph∆∞∆°ng th·ª©c kh√°c ho·∫∑c n·∫°p th√™m ti·ªÅn.'
            ], 402);
        }

        // 5) Giao d·ªãch th√†nh c√¥ng: l∆∞u DB trong transaction
        try {
            DB::beginTransaction();

            $maTT = 'TT' . now()->format('YmdHis') . rand(100,999);

            ThanhToan::create([
                'Ma_TT'     => $maTT,
                'Ma_BC'     => $ma_bc,
                'So_Tien'   => $totalCharge,
                'Hinh_Thuc' => $enumMethod,
                'Trang_Thai'=> 'Th√†nh c√¥ng',
                'Ghi_Chu'   => json_encode([
                    'type'            => 'deposit',
                    'deposit_amount'  => $depositAmt,
                    'service_fee'     => $serviceFee,
                    'fee_rate'        => $feeRate,
                    'method_raw'      => $validated['payment_method'],
                    'transaction_id'  => $charge['transaction_id'],
                ], JSON_UNESCAPED_UNICODE),
            ]);
            // üßæ Ghi log giao d·ªãch
            TransactionLog::record(
                $ma_bc,
                'Dat coc',
                "Kh√°ch h√†ng ƒë·∫∑t c·ªçc {$depositAmt} (t·ª∑ l·ªá {$depositRate}%) qua {$validated['payment_method']} ‚Äì M√£ giao d·ªãch {$charge['transaction_id']}"
            );

            // C·∫≠p nh·∫≠t tr·∫°ng th√°i bu·ªïi ch·ª•p: sau khi c·ªçc -> chuy·ªÉn sang "Ch·ªù thanh to√°n" (thanh to√°n ph·∫ßn c√≤n l·∫°i)
            $booking->Trang_Thai = 'Ch·ªù thanh to√°n';
            $booking->save();

            DB::commit();
        } catch (\Throwable $e) {
            DB::rollBack();
            Log::error('L·ªói l∆∞u giao d·ªãch ƒë·∫∑t c·ªçc', ['error' => $e->getMessage()]);
            return response()->json(['message' => 'C√≥ l·ªói khi l∆∞u giao d·ªãch.'], 500);
        }

        // 6) G·ª≠i email bi√™n nh·∫≠n
        try {
            // L·∫•y email kh√°ch h√†ng: b·∫°n c√≥ th·ªÉ join sang b·∫£ng tai_khoan n·∫øu mu·ªën ch√≠nh x√°c.
            $email = $validated['email'] ?? null; // dev tip: truy·ªÅn t·ª´ FE ƒë·ªÉ demo

            if ($email) {
                Mail::to($email)->send(new DepositReceiptMail([
                    'ma_bc'          => $ma_bc,
                    'base_price'     => $basePrice,
                    'deposit_rate'   => $depositRate,
                    'deposit_amount' => $depositAmt,
                    'service_fee'    => $serviceFee,
                    'total_charge'   => $totalCharge,
                    'method_label'   => ucfirst(str_replace('_', ' ', $validated['payment_method'])),
                    'transaction_id' => $charge['transaction_id'],
                    'paid_at'        => $charge['paid_at'],
                ]));
            }
        } catch (\Throwable $e) {
            Log::error('G·ª≠i email bi√™n nh·∫≠n th·∫•t b·∫°i', ['error' => $e->getMessage()]);
            // Kh√¥ng rollback giao d·ªãch v√¨ thanh to√°n ƒë√£ th√†nh c√¥ng; ch·ªâ log ƒë·ªÉ CSKH x·ª≠ l√Ω.
        }

        // 7) Tr·∫£ k·∫øt qu·∫£ cho FE
        return response()->json([
            'status'          => 'success',
            'icon'            => 'success', // FE hi·ªÉn th·ªã tick xanh
            'message'         => 'ƒê·∫∑t c·ªçc th√†nh c√¥ng',
            'booking_code'    => $ma_bc,
            'base_price'      => $basePrice,
            'deposit_rate'    => $depositRate,
            'deposit_amount'  => $depositAmt,
            'service_fee'     => $serviceFee,
            'total_charge'    => $totalCharge,
            'transaction_id'  => $charge['transaction_id'],
            'paid_at'         => $charge['paid_at'],
            'next_status'     => 'Ch·ªù thanh to√°n',
        ], 201);
    }
}
